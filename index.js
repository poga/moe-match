// Generated by LiveScript 1.2.0
var createBlock, checkRow, checkToken, checkTone, checkPos, checkMeaning, checkRadical, bindQ;
createBlock = function(){
  var x, i;
  if (Math.random() > 0.5) {
    x = window.seq[0];
    if (x) {
      return $('body').prepend("<div class='ui huge button sliding'>" + x + "</div>");
    }
  } else {
    i = Math.floor(Math.random() * Object.keys(window.TONES).length);
    x = Object.keys(window.TONES)[i];
    if (x) {
      return $("<div class='ui huge button sliding'>" + x + "</div>").prependTo('body');
    }
  }
};
checkRow = function(i){
  var toSymbol, str;
  toSymbol = function(bool){
    switch (bool) {
    case true:
      return "✓";
    case false:
      return "✗";
    }
  };
  str = "";
  $("#r" + i).children('td').children('div').each(function(i, x){
    if ($(x).html() !== "&nbsp;&nbsp;") {
      return str += $(x).html();
    }
  });
  console.log(str);
  if (str.length === 5 && checkTone(window.q, str)) {
    $("#r" + i).children('td').children('div').addClass('green');
    return alert("" + window.q.join("") + "，" + str + "。\n\n斷詞：" + toSymbol(checkToken(window.q, str)) + "\n平仄：" + toSymbol(checkTone(window.q, str)) + "\n詞性：" + toSymbol(checkPos(window.q, str)));
  }
};
checkToken = function(words, sentence){
  var i, i$, ref$, len$, l;
  i = 0;
  for (i$ = 0, len$ = (ref$ = words.map(fn$)).length; i$ < len$; ++i$) {
    l = ref$[i$];
    if (!window.WORDS[l][sentence.substr(i, l)]) {
      return false;
    }
    i++;
  }
  return true;
  function fn$(it){
    return it.length;
  }
};
checkTone = function(words, sentence){
  var i, i$, len$, w, ref$;
  i = 0;
  for (i$ = 0, len$ = words.length; i$ < len$; ++i$) {
    w = words[i$];
    if (window.TONES[w[w.length - 1]] === window.TONES[(ref$ = sentence.substr(i, w.length))[ref$.length - 1]]) {
      return false;
    }
    i += w.length;
  }
  return true;
};
checkPos = function(words, sentence){
  var i$, ref$, len$, i, w, sameType, type, ref1$, _;
  for (i$ = 0, len$ = (ref$ = words.join("").split("")).length; i$ < len$; ++i$) {
    i = i$;
    w = ref$[i$];
    sameType = false;
    for (type in ref1$ = window.POS[w]) {
      _ = ref1$[type];
      if (window.POS[sentence[i]][type]) {
        sameType = true;
      }
    }
    if (!sameType) {
      return false;
    }
  }
  return true;
};
checkMeaning = function(words, sentence){
  return false;
};
checkRadical = function(words, sentence){
  return false;
};
bindQ = function(q){
  var i$, ref$, len$, i, w, results$ = [];
  for (i$ = 0, len$ = (ref$ = q.join("").split("")).length; i$ < len$; ++i$) {
    i = i$;
    w = ref$[i$];
    results$.push($("#q" + i).html(w));
  }
  return results$;
};
window.WORDS = {};
$.getJSON('common.1.json', function(words){
  window.WORDS[1] = words;
  console.log(Object.keys(window.WORDS[1]).length);
  return $.getJSON('common.2.json', function(words){
    window.WORDS[2] = words;
    console.log(Object.keys(window.WORDS[2]).length);
    return $.getJSON('common.3.json', function(words){
      window.WORDS[3] = words;
      console.log(Object.keys(window.WORDS[3]).length);
      return $.getJSON('tone.json', function(tones){
        window.TONES = tones;
        return $.getJSON('pos.json', function(pos){
          window.POS = pos;
          return $(function(){
            window.seq = ['零', '媒', '現', '真', '實'];
            window.q = ['馬', '鹿', '如', '唬', '口'];
            bindQ(window.q);
            $('body').on('click', ".sliding", function(){
              $(".sliding").removeClass('red');
              $(this).addClass('red');
              window.selected = $(this).html();
              return console.log(window.selected);
            });
            $('body').on('click', ".slot", function(){
              if (window.selected) {
                $(this).removeClass('slot').html(window.selected);
                if (window.selected === window.seq[0]) {
                  window.seq.shift();
                }
                window.selected = void 8;
                $(".red.sliding").remove();
                return checkRow($(this).parents('tr')[0].id[1]);
              }
            });
            $('body').on("animationend webkitAnimationEnd oAnimationEnd MSAnimationEnd", ".sliding", function(){
              console.log('end');
              return $(this).remove();
            });
            createBlock();
            return setInterval(function(){
              return createBlock();
            }, 1000);
          });
        });
      });
    });
  });
});